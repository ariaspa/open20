<?php

/**
 * Lombardia Informatica S.p.A.
 * OPEN 2.0
 *
 *
 * @package    lispa\amos\core\module
 * @category   CategoryName
 */

namespace lispa\amos\core\module;

use yii\helpers\ArrayHelper;
use ReflectionClass;

/**
 * Class AmosModule
 * @package lispa\amos\core\module
 */
abstract class AmosModule extends \lispa\amos\core\module\BaseAmosModule implements ModuleInterface
{
    /**
     * Array that will store the models used in the package
     * e.g. :
     * [
     *     'Comment' => 'frontend/models/comments/CommentModel'
     * ]
     *
     * The classes defined here will be merged with getDefaultModels()
     * having he manually defined by the user preference.
     *
     * @var array
     */
    public $modelMap = [];

    /**
     * Return an instance of module
     *
     * @return AmosModule
     */

    public static function instance()
    {
        /**@var AmosModule $module */

        $module = \Yii::$app->getModule(static::getModuleName());
        return $module;

    }

    /**
     * @see
     */
    public function init()
    {
        parent::init();
        // layout path configuration
        $layoutModule = \Yii::$app->getModule('layout');

        if($layoutModule) {
            $this->setLayoutPath($layoutModule->layoutPath);
        }

        $layoutModule = \Yii::$app->getModule('layout');

        if($layoutModule) {
            $this->setLayoutPath($layoutModule->layoutPath);
        }

        $this->defineModelClasses();
    }

    /**
     * @return string
     */
    public function getAmosUniqueId()
    {
        $uniqueIdAliasAmos = 'amos' . parent::getUniqueId();
        return $uniqueIdAliasAmos; // TODO: Change the autogenerated stub
    }

    /**
     * Merges the default and user defined model classes
     * Also let's the developer to set new ones with the
     * parameter being those the ones with most preference.
     *
     * @param array $modelClasses
     */
    public function defineModelClasses($modelClasses = [])
    {
        $this->modelMap = ArrayHelper::merge(
            $this->getDefaultModels(),
            $this->modelMap,
            $modelClasses
        );
    }

    /**
     * Get default model classes
     */
    protected abstract function getDefaultModels();

    /**
     *
     * @param string $name
     * @return object
     */
    public function createModel($name)
    {
        return \Yii::createObject($this->model($name));
    }

    /**
     * Get defined className of model
     *
     * Returns an string or array compatible
     * with the Yii::createObject method.
     *
     * @param string $name
     * @param array $config // You should never send an array with a key defined as "class" since this will
     *                      // overwrite the main className defined by the system.
     * @return string|array
     */
    public function model($name)
    {
        $modelData = $this->modelMap[ucfirst($name)];
        return $modelData;
    }

    /**
     * @return string
     */
    public function getI18nDirPath(){
        $rc = new ReflectionClass(get_class($this));
        return dirname($rc->getFileName()) . DIRECTORY_SEPARATOR . 'i18n';
    }

    /**
     * This method return the session key that must be used to add in session
     * the url from the user have started the content creation.
     * @return string
     */
    public static function beginCreateNewSessionKey()
    {
        return 'beginCreateNewUrl_' . self::getModuleName();
    }

    /**
     * This method return the session key that must be used to add in session
     * the url date and time creation from the user have started the content creation.
     * @return string
     */
    public static function beginCreateNewSessionKeyDateTime()
    {
        return 'beginCreateNewUrlDateTime_' . self::getModuleName();
    }
}

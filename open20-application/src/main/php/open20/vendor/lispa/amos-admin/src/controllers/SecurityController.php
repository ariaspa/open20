<?php

/**
 * Lombardia Informatica S.p.A.
 * OPEN 2.0
 *
 *
 * @package    lispa\amos\admin\controllers
 * @category   CategoryName
 */

namespace lispa\amos\admin\controllers;

use lispa\amos\admin\AmosAdmin;
use lispa\amos\admin\models\ForgotPasswordForm;
use lispa\amos\admin\models\LoginForm;
use lispa\amos\admin\models\ProfileReactivationForm;
use lispa\amos\admin\models\RegisterForm;
use lispa\amos\admin\models\UserProfile;
use lispa\amos\admin\utility\UserProfileUtility;
use lispa\amos\core\forms\FirstAccessForm;
use lispa\amos\core\user\User;
use lispa\amos\notificationmanager\models\NotificationsConfOpt;
use Yii;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\helpers\Url;
use yii\web\Controller;
use lispa\amos\core\helpers\Html;

/**
 * Class SecurityController
 * @package lispa\amos\admin\controllers
 */
class SecurityController extends Controller
{
    /**
     * @var string $layout
     */
    public $layout = 'main';

    /**
     * @inheritdoc
     */
    public function init()
    {
        parent::init();
        $this->setUpLayout();
        // custom initialization code goes here
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => [
                            'login',
                            'register',
                            'security-message',
                            'error',
                            'errore',
                            'reactivate-profile',
                            'forgot-password',
                            'insert-auth-data'
                        ],
                        'allow' => true,
                    ],
                    [
                        'actions' => [
                            'logout',
                            'deimpersonate'
                        ],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                    [
                        'actions' => [
                            'impersonate'
                        ],
                        'allow' => true,
                        'roles' => ['IMPERSONATE_USERS'],
                    ],
                    [
                        'actions' => [
                            'unsubscribe'
                        ],
                        'allow' => true,
                        'roles' => ['?'],
                    ],
                    [
                        'actions' => [
                            'spedisci-credenziali',
                            'admin-send-credentials'
                        ],
                        'allow' => true,
                        'roles' => ['GESTIONE_UTENTI'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function actions()
    {
        $this->setUpLayout('main');
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }

    /**
     * Login action and function called on login view.
     * @return string
     */
    public function actionLogin()
    {
        $this->setUpLayout('login');

        if (!Yii::$app->user->isGuest) {
            return $this->goHome();
        }

        $model = new LoginForm();
        if ($model->load(Yii::$app->request->post())) {

            $user = User::findByUsername($model->username);

            if (is_null($user)) {
                $inactiveUser = User::findByUsernameInactive($model->username);
                if (!is_null($inactiveUser)) {
                    return $this->redirect('/admin/security/reactivate-profile?userdisabled');
                }

                //Trigger validation for password check
                $model->validate();

                return $this->render('login', [
                    'model' => $model,
                ]);
            }

            if ($model->login()) {
                /* per amos */
                if (\Yii::$app->params['template-amos']) {
                    $ruolo = \Yii::$app->authManager->getRole($model->ruolo);
                    $userId = \Yii::$app->getUser()->getId();
                    \Yii::$app->authManager->revokeAll($userId);
                    \Yii::$app->authManager->assign($ruolo, $userId);
                }

                //Autogenerated reset widgets
                if (\Yii::$app->params['template-amos'] && !is_null(Yii::$app->getModule('build'))) {
                    $this->run('/build/default/crea-dashboard');
                }

                return $this->goBack();
            } else {
                return $this->render('login', [
                    'model' => $model,
                ]);
            }
        } else {
            return $this->render('login', [
                'model' => $model,
            ]);
        }
    }


    /**
     * Login function called in case of automatic login needs.
     * @return string
     */

    public function login($username, $password, $community_id = null)
    {

        $model = new LoginForm([
            "username" => $username,
            "password" => $password
        ]);

        $user = User::findByUsername($model->username);

        if (is_null($user)) {
            $inactiveUser = User::findByUsernameInactive($model->username);
            if (!is_null($inactiveUser)) {
                return $this->redirect('/admin/security/reactivate-profile?userdisabled');
            }

            //Trigger validation for password check
            $model->validate();

            return $this->render('login', [
                'model' => $model,
            ]);
        }

        if ($model->login()) {
            /* per amos */
            if (\Yii::$app->params['template-amos']) {
                $ruolo = \Yii::$app->authManager->getRole($model->ruolo);
                $userId = \Yii::$app->getUser()->getId();
                \Yii::$app->authManager->revokeAll($userId);
                \Yii::$app->authManager->assign($ruolo, $userId);
            }

            //Autogenerated reset widgets
            if (\Yii::$app->params['template-amos'] && !is_null(Yii::$app->getModule('build'))) {
                $this->run('/build/default/crea-dashboard');
            }

            if($community_id!=null){
                $this->redirect(Yii::$app->getUrlManager()->createUrl(['/community/join', 'id' => $community_id]));
            } else {
                return $this->goBack();
            }
        } else {
            return $this->render('login', [
                'model' => $model,
            ]);
        }

    }

    /**
     * Logout action.
     * @return string
     */
    public function actionLogout()
    {
        Yii::$app->user->logout();
        if (\Yii::$app->params['template-amos']) {
            $idUtente = Yii::$app->getUser()->getId();
            $ids = \lispa\amos\dashboard\models\AmosUserDashboards::find()->andWhere(['user_id' => $idUtente])->select('id');
            \lispa\amos\dashboard\models\AmosUserDashboardsWidgetMm::deleteAll(['IN', 'amos_user_dashboards_id', $ids]);
            \lispa\amos\dashboard\models\AmosUserDashboards::deleteAll(['user_id' => $idUtente]);
        }
        return $this->goHome();
    }

    /**
     * Action to request the reactivation of a profile.
     * @return string
     */
    public function actionReactivateProfile()
    {
        $this->setUpLayout('login');

        if (!Yii::$app->user->isGuest) {
            return $this->goHome();
        }

        $model = new ProfileReactivationForm();
        /**
         * If $userId is false the user is not created
         */
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {

            $user = User::find()->andWhere(['username' => $model->username])->one();
            if (!empty($user)) {
                $model->email = $user->email;
                if ($user->userProfile->attivo == 1) {
                    $userProfile = new UserProfileController($user->id, $this->module);
                    $userProfile->sendCredentialsMail($user->userProfile);
                    Yii::$app->session->addFlash('success', AmosAdmin::t('amosadmin', "Se l'utente risulterà attivo, verrà inviata una email all'indirizzo indicato per reimpostare la password di accesso al sistema, altrimenti verrà inviata una richiesta di riattivazione del profilo."));
                } else {
                    $ok = $model->sendMail();
                    if ($ok) {
                        Yii::$app->session->addFlash('success', AmosAdmin::t('amosadmin', 'Se l\'utente risulterà attivo, verrà inviata una email all\'indirizzo indicato per reimpostare la password di accesso al sistema, altrimenti verrà inviata una richiesta di riattivazione del profilo.'));

                        $model = new ProfileReactivationForm(); // To empty all fields
                    } else {
                        Yii::$app->session->addFlash('danger', AmosAdmin::t('amosadmin', 'Error while sending reactivation request.'));
                    }
                }
            }
        }

        return $this->render('reactivate-profile', [
            'model' => $model,
        ]);
    }


    /**
     * @return bool|\yii\web\Response
     */
    public function actionRegister()
    {
        $this->setUpLayout('login');

        if (!Yii::$app->user->isGuest) {
            Yii::$app->session->addFlash('danger', AmosAdmin::t('amosadmin', 'Already Logged In'));

            return $this->goHome();
        }

        /**
         * If signup is not enabled
         **/
        if (!$this->module->enableRegister) {
            Yii::$app->session->addFlash('danger', AmosAdmin::t('amosadmin', 'Signup Disabled'));

            return $this->goHome();
        }

        /**
         * If the mail is not set i can't create user
         *
         * if(empty($userProfile->email)) {
         * Yii::$app->session->addFlash('danger', AmosAdmin::t('amosadmin', 'Unable to register, missing mail permission'));
         *
         * return $this->goHome();
         * }*/

        $model = new RegisterForm();

        //pre-compile form datas from get params
        $getParams = \Yii::$app->request->get();
        if(!empty($getParams['name']) && !empty($getParams['surname'])&& !empty($getParams['email'])) {
            $model->nome = $getParams['name'];
            $model->cognome = $getParams['surname'];
            $model->email = $getParams['email'];
        }


        if ($model->load(Yii::$app->request->post())) {
            /**
             * @var $newUser integer False or UserId
             */
            $newUser = AmosAdmin::getInstance()->createNewAccount(
                $model->nome,
                $model->cognome,
                $model->email,
                $model->privacy
            );

            /**
             * If $newUser is false the user is not created
             */
            if (!$newUser || isset($newUser['error'])) {
                //Yii::$app->session->addFlash('danger', AmosAdmin::t('amosadmin', 'Unable to register, user creation error'));
                $result_message = [];
                array_push($result_message, AmosAdmin::t('amosadmin', 'Unable to register, user creation error'));

                if ($newUser['messages']) {
                    foreach ($newUser['messages'] as $message) {
                        //Yii::$app->session->addFlash('danger', AmosAdmin::t('amosadmin', reset($message)));
                        array_push($result_message, AmosAdmin::t('amosadmin', reset($message)));
                    }
                }

                return $this->render('security-message', [
                    'title_message' => AmosAdmin::t('amosadmin', 'Errore'),
                    'result_message' => $result_message,
                    'go_to_login_url' => Url::current()
                ]);

                //return $this->goHome();
            }

            $userId = $newUser['user']->id;

            /**
             * @var $newUserProfile UserProfile
             */
            $newUserProfile = UserProfile::findOne(['user_id' => $userId]);

            /**
             * If $newUser is false the user is not created
             */
            if (!$newUserProfile || !$newUserProfile->id) {
                //Yii::$app->session->addFlash('danger', AmosAdmin::t('amosadmin', 'Error when loading profile data, try again'));

                return $this->render('security-message', [
                    'title_message' => AmosAdmin::t('amosadmin', 'Errore'),
                    'result_message' => AmosAdmin::t('amosadmin', 'Error when loading profile data, try again'),
                    'go_to_login_url' => Url::current()
                ]);

                //return $this->goHome();
            }

            $sent = UserProfileUtility::sendCredentialsMail($newUserProfile);
            if (!$sent) {
                //Yii::$app->session->addFlash('danger', AmosAdmin::t('amosadmin', 'Unable to send user mail, contact admin'));
                return $this->render('security-message', [
                    'title_message' => AmosAdmin::t('amosadmin', 'Errore'),
                    'result_message' => AmosAdmin::t('amosadmin', 'Unable to send user mail, contact admin')
                ]);
            } else {
                //Yii::$app->session->addFlash('success', AmosAdmin::t('amosadmin', 'An email has been sent to') . ' ' . $model->email);
                return $this->render('security-message', [
                    'title_message' => AmosAdmin::t('amosadmin', '#msg_complete_registration_title'),
                    'result_message' => [
                        AmosAdmin::t('amosadmin', '#msg_complete_registration_result_1') . '<br>' . Html::tag('span', $model->email),
                        AmosAdmin::t('amosadmin', '#msg_complete_registration_result_2')
                    ]
                ]);
            }

            //return $this->goHome();
        } else {
            return $this->render('register', [
                'model' => $model,
            ]);
        }
    }

    public function actionSecurityMessage()
    {
        $this->setUpLayout('login');
        return $this->render('security-message', [
            'result_message' => 'prova messaggio'
        ]);
    }

    /**
     * Forgotten password form
     * @return string|\yii\web\Response
     */
    public function actionForgotPassword()
    {
        $this->setUpLayout('login');

        if (!\Yii::$app->user->isGuest) {
            return $this->goHome();
        }

        $model = new ForgotPasswordForm();
        if ($model->load(Yii::$app->request->post())) {
            if ($model->email != NULL) {
				//pr($model->email);
                $dati_utente = $model->verifyEmail($model->email);
				//pr($dati_utente->userProfile->id);die;
                if ($dati_utente) {
                    $this->actionSpedisciCredenziali($dati_utente->userProfile->id, true, true);
                }
                return $this->render('security-message', [
                    'title_message' => AmosAdmin::t('amosadmin', '#msg_forgot_pwd_title'),
                    'result_message' => [
                        AmosAdmin::t('amosadmin', 'Verificheremo che la mail sia esistente e in caso affermativo invieremo le credenziali all\'indirizzo: ') . '<br>' . Html::tag('span', $model->email),
                        AmosAdmin::t('amosadmin', 'Cliccando sul link presente nella mail potrai reimpostare la password per il tuo profilo')
                    ]
                ]);
            }
        }

        return $this->render('forgot_password', [
            'model' => $model,
        ]);
    }


    public function actionAdminSendCredentials($id)
    {
        $model = UserProfile::findOne($id);
        if ($model && $model->user && $model->user->email) {
            $model->user->generatePasswordResetToken();
            $model->user->save(false);
            $sent = false;
            if (empty($model->ultimo_accesso)) {
                $sent = UserProfileUtility::sendCredentialsMail($model);
            } else {

                $sent = UserProfileUtility::sendAdminCredentialsMail($model);
            }
            if ($sent) {
                Yii::$app->session->addFlash('success', AmosAdmin::t('amosadmin', 'Credenziali spedite correttamente alla email {email}', ['email' => $model->user->email]));
            } else {
                Yii::$app->session->addFlash('danger', AmosAdmin::t('amosadmin', 'Si è verificato un errore durante la spedizione delle credenziali'));
            }
        } else {
            //Yii::$app->session->addFlash('danger', AmosAdmin::t('amosadmin', 'L\'utente non esiste o è sprovvisto di email, impossibile spedire le credenziali'));
            Yii::$app->session->addFlash('danger', AmosAdmin::t('amosadmin', 'Si è verificato un errore durante la spedizione delle credenziali'));
        }
        return $this->redirect(Url::previous());
    }


    /**
     * Send Login-infos to user
     * @param $id User ID
     * @param $isForgotPasswordView set true if this function is called from the forgot-password view to avoid appearing of flash messages
     * @param $isForgotPasswordRequest set true if this function is called from a reset password request action
     * @return mixed
     */
    public function actionSpedisciCredenziali($id, $isForgotPasswordView = false, $isForgotPasswordRequest = false)
    {
        $model = UserProfile::findOne($id);
        if ($model && $model->user && $model->user->email) {
            $model->user->generatePasswordResetToken();
            $model->user->save(false);
            if (!$isForgotPasswordRequest) {
                $sent = UserProfileUtility::sendCredentialsMail($model);
            } else {
                $sent = UserProfileUtility::sendPasswordResetMail($model);
            }
            if ($sent) {
                if (!$isForgotPasswordView) {
                    Yii::$app->session->addFlash('success', AmosAdmin::t('amosadmin', 'Credenziali spedite correttamente alla email {email}', ['email' => $model->user->email]));
                }
            } else {
                if (!$isForgotPasswordView) {
                    Yii::$app->session->addFlash('danger', AmosAdmin::t('amosadmin', 'Si è verificato un errore durante la spedizione delle credenziali'));
                }
            }
        } else {
            if (!$isForgotPasswordView) {
                //Yii::$app->session->addFlash('danger', AmosAdmin::t('amosadmin', 'L\'utente non esiste o è sprovvisto di email, impossibile spedire le credenziali'));
                Yii::$app->session->addFlash('danger', AmosAdmin::t('amosadmin', 'Si è verificato un errore durante la spedizione delle credenziali'));
            }
        }
        if (!$isForgotPasswordView) {
            return $this->redirect(Url::previous());
        }
    }

    /**
     * @param $user_id
     * @return \yii\web\Response
     */
    public function actionImpersonate($user_id)
    {
        //Rememberm Impersonator
        $impersonator = Yii::$app->user->id;

        //Timeout login
        $loginTimeout = Yii::$app->params['loginTimeout'] ?: 3600;

        //Go out from thi user
        Yii::$app->user->logout();

        //New user identity
        $identity = User::findOne(['id' => $user_id]);

        //Login to selected user
        Yii::$app->user->login($identity, $loginTimeout);

        //Set Current admin user in session
        Yii::$app->session->set('IMPERSONATOR', $impersonator);

        //Back to user profile
        return $this->redirect(
            \Yii::$app->urlManager->createUrl(['/admin/user-profile/view',
                'id' => $user_id
            ])
        );
    }

    public function actionDeimpersonate()
    {
        if (Yii::$app->session->has('IMPERSONATOR')) {
            //Get Impersonator
            $impersonator = Yii::$app->session->get('IMPERSONATOR');

            //Remove admin user in session
            Yii::$app->session->remove('IMPERSONATOR');

            //Timeout login
            $loginTimeout = Yii::$app->params['loginTimeout'] ?: 3600;

            //Go out from thi user
            Yii::$app->user->logout();

            //New user identity
            $identity = User::findOne(['id' => $impersonator]);

            //Login to selected user
            Yii::$app->user->login($identity, $loginTimeout);
        }

        return $this->redirect('/');
    }

    /**
     * @param null $layout
     * @return bool
     */
    public function setUpLayout($layout = null)
    {
        if ($layout === false) {
            $this->layout = false;
            return true;
        }
        $this->layout = (!empty($layout)) ? $layout : $this->layout;
        $module = \Yii::$app->getModule('layout');
        if (empty($module)) {
            if (strpos($this->layout, '@') === false) {
                $this->layout = '@vendor/lispa/amos-core/views/layouts/' . (!empty($layout) ? $layout : $this->layout);
            }
            return true;
        }
        return true;
    }

    /**
     * Login-info choice at register step
     * @return string
     */
    public function actionInsertAuthData()
    {
        $this->setUpLayout('login');
        $password_reset_token = null;
        $user = null;
        $username = null;
        $community_id = null;
        $redirectUrl =  \Yii::$app->getUser()->loginUrl;
        $isFirstAccess = false;
        if (NULL !== (Yii::$app->getRequest()->getQueryParam('token'))) {
            $password_reset_token = Yii::$app->getRequest()->getQueryParam('token');
            $user = User::findByPasswordResetToken($password_reset_token);
            if ($user) {
                $username = $user->username;
                $isFirstAccess = empty($user->password_hash);
            }
        }

        if ((Yii::$app->getRequest()->getQueryParam('community_id')) !== NULL) {
            $community_id = Yii::$app->getRequest()->getQueryParam('community_id');
            $redirectUrl = Yii::$app->getUrlManager()->createUrl(['/community/join', 'id' => $community_id]);
        }

        if ($user && !$username) {
            if (Yii::$app->request->isPost) {
                $model = new FirstAccessForm();
                if($isFirstAccess) {
                    $model->setScenario(FirstAccessForm::SCENARIO_CHECK_PRIVACY);
                }
                if ($model->load(Yii::$app->request->post())) {
                    if ($model->verifyUsername($model->username)) {
                        Yii::$app->getSession()->addFlash('danger', Yii::t('amosadmin', 'Attenzione! La username inserita &egrave; gi&agrave; in uso. Sceglierne un&#39;altra.'));
                        return $this->render('first_access', [
                            'model' => $model,
                            'isFirstAccess' => $isFirstAccess

                        ]);
                    } else {
                        $user->setPassword($model->password);
                        $user->username = $model->username;
                        if ($user->validate() && $user->save()) {
                            Yii::$app->getSession()->addFlash('success', Yii::t('amosadmin', 'Perfetto! Hai scelto correttamente le tue credenziali.'));
                            $user->removePasswordResetToken();
                            $user->save();
                            if($isFirstAccess) {
                                $profile = $user->userProfile;
                                $profile->privacy = 1;
                                $profile->save(false);
                            }
                            return $this->login($model->username,$model->password, $community_id);
                        } else {
                            //return $this->render('login_error', ['message' => Yii::t('amosadmin', " Errore! Il sito non ha risposto, probabilmente erano in corso operazioni di manutenzione. Riprova più tardi.")]);
                            return $this->render('security-message', [
                                'title_message' => AmosAdmin::t('amosadmin', 'Errore'),
                                'result_message' => Yii::t('amosadmin', " Errore! Il sito non ha risposto, probabilmente erano in corso operazioni di manutenzione. Riprova più tardi.")
                            ]);
                        }
                    }
                } else {
                    $model->token = $password_reset_token;
                    return $this->render('first_access', [
                        'model' => $model,
                        'isFirstAccess' => $isFirstAccess
                    ]);
                }
            } else {
                $model = new FirstAccessForm();
                if($isFirstAccess) {
                    $model->setScenario(FirstAccessForm::SCENARIO_CHECK_PRIVACY);
                }
                $model->token = $password_reset_token;
                return $this->render('first_access', [
                    'model' => $model,
                    'isFirstAccess' => $isFirstAccess

                ]);
            }
        } else if ($user && $username) {
            if (Yii::$app->request->isPost) {
                $model = new FirstAccessForm();
                if($isFirstAccess) {
                    $model->setScenario(FirstAccessForm::SCENARIO_CHECK_PRIVACY);
                }
                if ($model->load(Yii::$app->request->post())) {

                    $user->setPassword($model->password);

                    if ($user->validate() && $user->save()) {
                        Yii::$app->getSession()->addFlash('success', Yii::t('amosadmin', 'Perfetto! Hai scelto correttamente la tua password.'));
                        $user->removePasswordResetToken();
                        $user->save();
                        if($isFirstAccess) {
                            $profile = $user->userProfile;
                            $profile->privacy = 1;
                            $profile->save(false);
                        }
                        return $this->login($username,$model->password,$community_id);
                    } else {
                        //return $this->render('login_error', ['message' => Yii::t('amosadmin', " Errore! Il sito non ha risposto, probabilmente erano in corso operazioni di manutenzione. Riprova più tardi.")]);
                        return $this->render('security-message', [
                            'title_message' => AmosAdmin::t('amosadmin', 'Errore'),
                            'result_message' => Yii::t('amosadmin', " Errore! Il sito non ha risposto, probabilmente erano in corso operazioni di manutenzione. Riprova più tardi.")
                        ]);
                    }
                } else {
                    $model->token = $password_reset_token;
                    $model->username = $username;
                    return $this->render('reset_password', [
                        'model' => $model,
                        'isFirstAccess' => $isFirstAccess
                    ]);
                }
            } else {
                $model = new FirstAccessForm();
                if($isFirstAccess) {
                    $model->setScenario(FirstAccessForm::SCENARIO_CHECK_PRIVACY);
                }
                $model->token = $password_reset_token;
                $model->username = $username;
                return $this->render('reset_password', [
                    'model' => $model,
                    'isFirstAccess' => $isFirstAccess

                ]);
            }
        } else {
            //return $this->render('login_error', ['message' => Yii::t('amosadmin', " Errore! Il tempo per poter accedere è scaduto. Contatti l'amministratore e si faccia reinviare la mail di accesso.")]);
            return $this->render('security-message', [
                'title_message' => AmosAdmin::t('amosadmin', 'Errore'),
                'result_message' => Yii::t('amosadmin', " Errore! Il tempo per poter accedere è scaduto. Contatta l'amministratore e si faccia reinviare la mail di accesso.")
            ]);
        }
    }

    /**
     * Action to unsubscribe a user from the notification emails.
     * @param int $id
     * @param string $token
     * @return string
     */
    public function actionUnsubscribe($id, $token)
    {
        $user = User::findOne(['id' => $id]);
        $message = '#unsubscribe_message_invalid_user';
        if (!is_null($user)) {
            $md5Username = md5($user->username);
            if ($md5Username == $token) {
                $notifyModule = Yii::$app->getModule('notify');
                if (!is_null($notifyModule)) {
                    /** @var \lispa\amos\notificationmanager\AmosNotify $notifyModule */
                    $ok = $notifyModule->saveNotificationConf($id, NotificationsConfOpt::EMAIL_OFF);
                    if ($ok) {
                        $message = '#unsubscribe_message_success';
                    } else {
                        $message = '#unsubscribe_message_error';
                    }
                } else {
                    $message = '#unsubscribe_message_notify_module_not_present';
                }
            } else {
                $message = '#unsubscribe_message_invalid_token';
            }
        }
        return $this->render('unsubscribe', [
            'message' => $message
        ]);
    }
}
